// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lms,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=975,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=587,HLS_SYN_LUT=1145,HLS_VERSION=2018_3}" *)

module lms (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        y,
        mu,
        ap_return
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_state42 = 43'd2199023255552;
parameter    ap_ST_fsm_state43 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x;
input  [31:0] y;
input  [31:0] mu;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] lms_sr_address0;
reg    lms_sr_ce0;
reg    lms_sr_we0;
reg   [31:0] lms_sr_d0;
wire   [31:0] lms_sr_q0;
reg   [5:0] lms_w_address0;
reg    lms_w_ce0;
reg    lms_w_we0;
wire   [31:0] lms_w_q0;
reg   [31:0] reg_146;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state37;
wire   [31:0] grp_fu_142_p2;
reg   [31:0] reg_153;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state35;
wire   [31:0] grp_fu_137_p2;
reg   [31:0] reg_159;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state42;
wire   [5:0] i_fu_173_p2;
reg   [5:0] i_reg_225;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_i_fu_167_p2;
wire   [63:0] tmp_3_i_fu_184_p1;
reg   [63:0] tmp_3_i_reg_235;
reg   [31:0] lms_sr_load_reg_245;
wire   [5:0] i_1_fu_195_p2;
reg   [5:0] i_1_reg_253;
wire    ap_CS_fsm_state36;
reg   [5:0] lms_w_addr_1_reg_258;
wire   [0:0] exitcond_i_fu_189_p2;
reg   [31:0] lms_yhat_load_i_reg_103;
reg   [5:0] i_i_reg_115;
reg   [5:0] i1_i_reg_126;
wire    ap_CS_fsm_state43;
wire   [63:0] tmp_2_i_fu_179_p1;
wire   [63:0] tmp_1_i_fu_201_p1;
wire    ap_CS_fsm_state32;
reg   [31:0] grp_fu_137_p0;
reg   [31:0] grp_fu_137_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state38;
reg   [31:0] grp_fu_142_p0;
reg   [31:0] grp_fu_142_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state28;
reg   [1:0] grp_fu_137_opcode;
reg   [42:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
end

lms_lms_sr #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
lms_sr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lms_sr_address0),
    .ce0(lms_sr_ce0),
    .we0(lms_sr_we0),
    .d0(lms_sr_d0),
    .q0(lms_sr_q0)
);

lms_lms_sr #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
lms_w_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lms_w_address0),
    .ce0(lms_w_ce0),
    .we0(lms_w_we0),
    .d0(reg_159),
    .q0(lms_w_q0)
);

lms_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lms_faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_137_p0),
    .din1(grp_fu_137_p1),
    .opcode(grp_fu_137_opcode),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

lms_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lms_fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_142_p0),
    .din1(grp_fu_142_p1),
    .ce(1'b1),
    .dout(grp_fu_142_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i1_i_reg_126 <= i_1_reg_253;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        i1_i_reg_126 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_i_reg_115 <= i_reg_225;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_115 <= 6'd50;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        lms_yhat_load_i_reg_103 <= grp_fu_137_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lms_yhat_load_i_reg_103 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        i_1_reg_253 <= i_1_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_167_p2 == 1'd0))) begin
        i_reg_225 <= i_fu_173_p2;
        tmp_3_i_reg_235[5 : 0] <= tmp_3_i_fu_184_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        lms_sr_load_reg_245 <= lms_sr_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (exitcond_i_fu_189_p2 == 1'd0))) begin
        lms_w_addr_1_reg_258 <= tmp_1_i_fu_201_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state37))) begin
        reg_146 <= lms_w_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_153 <= grp_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_159 <= grp_fu_137_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & (exitcond_i_fu_189_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & (exitcond_i_fu_189_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_137_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_137_opcode = 2'd0;
    end else begin
        grp_fu_137_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_137_p0 = reg_146;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_137_p0 = y;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_137_p0 = lms_yhat_load_i_reg_103;
    end else begin
        grp_fu_137_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_137_p1 = reg_159;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_137_p1 = reg_153;
    end else begin
        grp_fu_137_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_142_p0 = reg_153;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_142_p0 = reg_159;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_142_p0 = reg_146;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_142_p0 = lms_sr_load_reg_245;
    end else begin
        grp_fu_142_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_142_p1 = mu;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_142_p1 = x;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_142_p1 = reg_146;
    end else begin
        grp_fu_142_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        lms_sr_address0 = 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lms_sr_address0 = tmp_3_i_reg_235;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        lms_sr_address0 = tmp_2_i_fu_179_p1;
    end else begin
        lms_sr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state2))) begin
        lms_sr_ce0 = 1'b1;
    end else begin
        lms_sr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        lms_sr_d0 = x;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lms_sr_d0 = lms_sr_q0;
    end else begin
        lms_sr_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state32))) begin
        lms_sr_we0 = 1'b1;
    end else begin
        lms_sr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        lms_w_address0 = lms_w_addr_1_reg_258;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        lms_w_address0 = tmp_1_i_fu_201_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_167_p2 == 1'd1))) begin
        lms_w_address0 = 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_167_p2 == 1'd0))) begin
        lms_w_address0 = tmp_3_i_fu_184_p1;
    end else begin
        lms_w_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_167_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_167_p2 == 1'd0)))) begin
        lms_w_ce0 = 1'b1;
    end else begin
        lms_w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        lms_w_we0 = 1'b1;
    end else begin
        lms_w_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_167_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (exitcond_i_fu_189_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_return = 32'd0;

assign exitcond_i_fu_189_p2 = ((i1_i_reg_126 == 6'd50) ? 1'b1 : 1'b0);

assign i_1_fu_195_p2 = (i1_i_reg_126 + 6'd1);

assign i_fu_173_p2 = ($signed(i_i_reg_115) + $signed(6'd63));

assign tmp_1_i_fu_201_p1 = i1_i_reg_126;

assign tmp_2_i_fu_179_p1 = i_fu_173_p2;

assign tmp_3_i_fu_184_p1 = i_i_reg_115;

assign tmp_i_fu_167_p2 = ((i_i_reg_115 == 6'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_3_i_reg_235[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //lms
